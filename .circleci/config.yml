version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/circleci-demo-java-spring # directory where steps will run
    docker: # run the steps with Docker
      - image: bitnami/kubectl
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline # gets the project dependencies
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}
      - run: echo `kubectl version` # run the actual tests
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/java-to-k8s-0.1.0.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
      - persist_to_workspace:
          root: .
          paths:
            - Dockerfile
            - target/*
  compose:
    environment:
      IMAGE_NAME: grenader/java-to-k8s
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
    - attach_workspace:
        at: .
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: docker build -t $IMAGE_NAME:latest .
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "DOCKERHUB_USERNAME = $DOCKERHUB_USERNAME"
          echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          #          IMAGE_TAG=${CIRCLE_TAG/v/''}
          #          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
          #         docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2
  build-master:
    jobs:
      - build
      - compose:
          context: default
          requires:
            - build

